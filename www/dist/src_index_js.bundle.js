"use strict";
/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunkgol_webapp"] = self["webpackChunkgol_webapp"] || []).push([["src_index_js"],{

/***/ "../wasm/pkg/wasm_game_of_life_bg.js":
/*!*******************************************!*\
  !*** ../wasm/pkg/wasm_game_of_life_bg.js ***!
  \*******************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"INIT\": () => (/* binding */ INIT),\n/* harmony export */   \"Universe\": () => (/* binding */ Universe),\n/* harmony export */   \"__wbg_random_7b8246250fd79f60\": () => (/* binding */ __wbg_random_7b8246250fd79f60),\n/* harmony export */   \"__wbindgen_throw\": () => (/* binding */ __wbindgen_throw)\n/* harmony export */ });\n/* harmony import */ var _wasm_game_of_life_bg_wasm__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./wasm_game_of_life_bg.wasm */ \"../wasm/pkg/wasm_game_of_life_bg.wasm\");\n/* module decorator */ module = __webpack_require__.hmd(module);\n\n\nconst lTextDecoder = typeof TextDecoder === 'undefined' ? (0, module.require)('util').TextDecoder : TextDecoder;\n\nlet cachedTextDecoder = new lTextDecoder('utf-8', { ignoreBOM: true, fatal: true });\n\ncachedTextDecoder.decode();\n\nlet cachegetUint8Memory0 = null;\nfunction getUint8Memory0() {\n    if (cachegetUint8Memory0 === null || cachegetUint8Memory0.buffer !== _wasm_game_of_life_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.memory.buffer) {\n        cachegetUint8Memory0 = new Uint8Array(_wasm_game_of_life_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.memory.buffer);\n    }\n    return cachegetUint8Memory0;\n}\n\nfunction getStringFromWasm0(ptr, len) {\n    return cachedTextDecoder.decode(getUint8Memory0().subarray(ptr, ptr + len));\n}\n\nfunction notDefined(what) { return () => { throw new Error(`${what} is not defined`); }; }\n/**\n*/\nconst INIT = Object.freeze({ Empty:0,\"0\":\"Empty\",Random:1,\"1\":\"Random\",Type1:2,\"2\":\"Type1\", });\n/**\n*/\nclass Universe {\n\n    static __wrap(ptr) {\n        const obj = Object.create(Universe.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        _wasm_game_of_life_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbg_universe_free(ptr);\n    }\n    /**\n    * A single time-step in the universe\n    */\n    tick() {\n        _wasm_game_of_life_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.universe_tick(this.ptr);\n    }\n    /**\n    * Set cell value\n    * @param {number} row\n    * @param {number} col\n    */\n    toggle_cell(row, col) {\n        _wasm_game_of_life_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.universe_toggle_cell(this.ptr, row, col);\n    }\n    /**\n    * @param {number} init\n    */\n    init(init) {\n        _wasm_game_of_life_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.universe_init(this.ptr, init);\n    }\n    /**\n    * Return pointer to WebAssembly's linear memory\n    * @returns {number}\n    */\n    cells() {\n        var ret = _wasm_game_of_life_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.universe_cells(this.ptr);\n        return ret;\n    }\n    /**\n    * Get universe width\n    * @returns {number}\n    */\n    width() {\n        var ret = _wasm_game_of_life_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.universe_width(this.ptr);\n        return ret;\n    }\n    /**\n    * Get universe height\n    * @returns {number}\n    */\n    height() {\n        var ret = _wasm_game_of_life_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.universe_height(this.ptr);\n        return ret;\n    }\n    /**\n    * Constructor\n    * @returns {Universe}\n    */\n    static new() {\n        var ret = _wasm_game_of_life_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.universe_new();\n        return Universe.__wrap(ret);\n    }\n}\n\nconst __wbg_random_7b8246250fd79f60 = typeof Math.random == 'function' ? Math.random : notDefined('Math.random');\n\nfunction __wbindgen_throw(arg0, arg1) {\n    throw new Error(getStringFromWasm0(arg0, arg1));\n};\n\n\n\n//# sourceURL=webpack://gol-webapp/../wasm/pkg/wasm_game_of_life_bg.js?");

/***/ }),

/***/ "./src/index.js":
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var wasm_game_of_life__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! wasm-game-of-life */ \"../wasm/pkg/wasm_game_of_life_bg.js\");\n/* harmony import */ var wasm_game_of_life_wasm_game_of_life_bg_wasm__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! wasm-game-of-life/wasm_game_of_life_bg.wasm */ \"../wasm/pkg/wasm_game_of_life_bg.wasm\");\n// Game of Life Engine\n\n // WebAssembly's linear memory\n\nconst CELL_SIZE = 5; // [px]\nconst GRID_COLOR = \"#EEEEEE\";\nconst DEAD_COLOR = \"#FFFFFF\";\nconst ALIVE_COLOR = \"#000000\";\n\n// Construct the universe, and get its width and height.\nconst universe = wasm_game_of_life__WEBPACK_IMPORTED_MODULE_0__.Universe[\"new\"]();\nconst WIDTH = universe.width();\nconst HEIGHT = universe.height();\nconst SIZE = WIDTH * HEIGHT;\n\n// Give the canvas room for all of our cells and a 1px border\n// around each of them.\nconst canvas = document.getElementById(\"game-of-life-canvas\");\ncanvas.width = (CELL_SIZE + 1) * WIDTH + 1;\ncanvas.height = (CELL_SIZE + 1) * HEIGHT + 1;\nconst ctx = canvas.getContext('2d');\n\nlet animationId = null;\n\n/**\n * Get buffer index\n * @param {number} row \n * @param {number} col \n * @returns \n */\n const getIndex = (row, col) => {\n  return row * WIDTH + col;\n};\n\n/**\n * Draw grid\n */\n const drawGrid = () => {\n  \n  ctx.beginPath();\n  \n  // Draw vertical lines\n  for (let i = 0; i <= WIDTH; i++) {\n    ctx.moveTo(i * (CELL_SIZE + 1) + 1, 0);\n    ctx.lineTo(i * (CELL_SIZE + 1) + 1, (CELL_SIZE + 1) * HEIGHT + 1);\n  }\n  \n  // Draw horizontal lines\n  for (let i = 0; i <= HEIGHT; i++) {\n    ctx.moveTo(0, i * (CELL_SIZE + 1) + 1);\n    ctx.lineTo((CELL_SIZE + 1) * WIDTH + 1, i * (CELL_SIZE + 1) + 1);\n  }\n  \n  // Assign color\n  ctx.strokeStyle = GRID_COLOR;\n  ctx.stroke();\n}\n\n/**\n * Draw cells\n */\n const drawCells = () => {\n  const cellsPtr = universe.cells(); // get pointer to WebAssembly's linear memory\n  const cells = new Uint8Array(wasm_game_of_life_wasm_game_of_life_bg_wasm__WEBPACK_IMPORTED_MODULE_1__.memory.buffer, cellsPtr, SIZE);\n\n  ctx.beginPath();\n\n  // Alive cells\n  ctx.fillStyle = ALIVE_COLOR;\n  for (let row = 0; row < HEIGHT; row++) {\n    for (let col = 0; col < WIDTH; col++) {\n      const idx = getIndex(row, col);\n      if (cells[idx]) {\n        ctx.fillRect(\n          col * (CELL_SIZE + 1) + 1,\n          row * (CELL_SIZE + 1) + 1,\n          CELL_SIZE,\n          CELL_SIZE\n        );\n      }\n    }\n  }\n\n  // Dead cells\n  ctx.fillStyle = DEAD_COLOR;\n  for (let row = 0; row < HEIGHT; row++) {\n    for (let col = 0; col < WIDTH; col++) {\n      const idx = getIndex(row, col);\n      if (!cells[idx]) {\n        ctx.fillRect(\n          col * (CELL_SIZE + 1) + 1,\n          row * (CELL_SIZE + 1) + 1,\n          CELL_SIZE,\n          CELL_SIZE\n        );\n      }\n    }\n  }\n\n  ctx.stroke();\n}\n\n/**\n * Toggle selected cell\n */\n const onToggleCell = (e) => {\n  const boundingRect = canvas.getBoundingClientRect();\n\n  const scaleX = canvas.width / boundingRect.width;\n  const scaleY = canvas.height / boundingRect.height;\n\n  const canvasLeft = (e.clientX - boundingRect.left) * scaleX;\n  const canvasTop = (e.clientY - boundingRect.top) * scaleY;\n\n  const row = Math.min(Math.floor(canvasTop / (CELL_SIZE + 1)), HEIGHT - 1);\n  const col = Math.min(Math.floor(canvasLeft / (CELL_SIZE + 1)), WIDTH - 1);\n\n  universe.toggle_cell(row, col);\n\n  drawGrid();\n  drawCells();\n}\n\n/**\n * Initialize universe\n * @param {INIT} init \n */\nconst initUniverse = (init) => {\n  switch (init) {\n    case wasm_game_of_life__WEBPACK_IMPORTED_MODULE_0__.INIT.Empty:\n      universe.init(wasm_game_of_life__WEBPACK_IMPORTED_MODULE_0__.INIT.Empty);\n      break;\n    case wasm_game_of_life__WEBPACK_IMPORTED_MODULE_0__.INIT.Random:\n      universe.init(wasm_game_of_life__WEBPACK_IMPORTED_MODULE_0__.INIT.Random);\n      break;\n    case wasm_game_of_life__WEBPACK_IMPORTED_MODULE_0__.INIT.Type1:\n      universe.init(wasm_game_of_life__WEBPACK_IMPORTED_MODULE_0__.INIT.Type1);\n      break;\n    default:\n      break;\n  }\n\n  drawGrid();\n  drawCells();\n}\n\n/**\n * Initialization buttons\n */\ndocument.getElementById(\"clear\").addEventListener(\"click\", () => initUniverse(wasm_game_of_life__WEBPACK_IMPORTED_MODULE_0__.INIT.Empty))\ndocument.getElementById(\"random\").addEventListener(\"click\", () => initUniverse(wasm_game_of_life__WEBPACK_IMPORTED_MODULE_0__.INIT.Random))\ndocument.getElementById(\"type-1\").addEventListener(\"click\", () => initUniverse(wasm_game_of_life__WEBPACK_IMPORTED_MODULE_0__.INIT.Type1))\n\n/**\n * Interaction button\n */\nconst playPauseButton = document.getElementById(\"play-pause\");\nplayPauseButton.addEventListener(\"click\", () => {\n  if (!animationId) {\n    console.log('play')\n    playPauseButton.textContent = \"‚è∏\";\n    renderLoop();\n  } else {\n    console.log('pause')\n    playPauseButton.textContent = \"‚èØÔ∏é\";\n    cancelAnimationFrame(animationId);\n    animationId = null;\n  }\n});\n\n/**\n * Class to measure FPS performance\n */\nconst fps = new class {\n  constructor() {\n    this.fps = document.getElementById(\"fps\");\n    this.frames = [];\n    this.lastFrameTimeStamp = performance.now();\n  }\n\n  render() {\n    // Compute frames per second\n    const now = performance.now();\n    const delta = now - this.lastFrameTimeStamp;\n    this.lastFrameTimeStamp = now; // update timestamp\n    const fps = 1 / delta * 1000; // [Hz]\n\n    // Save the 100 most recent FPS values\n    this.frames.push(fps);\n    if (this.frames.length >= 100) { // handle overflow\n      this.frames.shift();\n    }\n\n    // Find the max, min, and mean of the last 100 FPS values\n    let max = Math.max(...this.frames);\n    let min = Math.min(...this.frames);\n    let sum = this.frames.reduce((total, currentValue) => {return total + currentValue});\n    let mean = sum / this.frames.length;\n\n    // Render the statistics.\n    this.fps.textContent = `FPS: ${Math.round(fps)} (Avg: ${Math.round(mean)}, Min: ${Math.round(min)}, Max: ${Math.round(max)})`.trim();\n  }\n};\n\n/**\n * Render loop\n */\n const renderLoop = () => {\n  fps.render();\n\n  // console.time();\n  universe.tick();\n  // console.timeEnd();\n\n  drawGrid();\n  drawCells();\n\n  animationId = requestAnimationFrame(renderLoop);\n};\n\n// Initialize universe\ncanvas.addEventListener('click', onToggleCell);\ninitUniverse(wasm_game_of_life__WEBPACK_IMPORTED_MODULE_0__.INIT.Random);\n\n\n//# sourceURL=webpack://gol-webapp/./src/index.js?");

/***/ }),

/***/ "../wasm/pkg/wasm_game_of_life_bg.wasm":
/*!*********************************************!*\
  !*** ../wasm/pkg/wasm_game_of_life_bg.wasm ***!
  \*********************************************/
/***/ ((module, exports, __webpack_require__) => {

eval("\"use strict\";\n// Instantiate WebAssembly module\nvar wasmExports = __webpack_require__.w[module.id];\n__webpack_require__.r(exports);\n// export exports from WebAssembly module\nfor(var name in wasmExports) if(name) exports[name] = wasmExports[name];\n// exec imports from WebAssembly module (for esm order)\n/* harmony import */ var m0 = __webpack_require__(/*! ./wasm_game_of_life_bg.js */ \"../wasm/pkg/wasm_game_of_life_bg.js\");\n\n\n// exec wasm module\nwasmExports[\"\"]()\n\n//# sourceURL=webpack://gol-webapp/../wasm/pkg/wasm_game_of_life_bg.wasm?");

/***/ })

}]);